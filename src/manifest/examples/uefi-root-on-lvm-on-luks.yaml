hostname: arch-desktop
timezone: US/Pacific # Mirrors /usr/share/zoneinfo

# Create GPT table on /dev/vda,
# and create 2 partitions:
# (1) vda1 => 300M, of type EF00
# (2) vda2 => all blocks after end of vda1, of type 8E
#
# Note: disks.partitions.label is unused
disks:
  - device: /dev/vda
    table: mbr-dos
    partitions:
      - label: boot
        size: 300M
        type: ef # EFI
      - label: root
        type: 8e # Linux LVM

# Create/prepare device mapper
dm:
  # Create a LUKS device on /dev/vda2
  # and open it as /dev/mapper/crypty
  - type: luks
    device: /dev/vda2
    name: crypty

  # Create LVM devices
  - type: lvm
    # Create PV on /dev/mapper/crypty
    pvs:
      - /dev/mapper/crypty

    # Create LVM VG `archvg` with PV /dev/mapper/crypty
    vgs:
      - name: archvg
        pvs:
          - /dev/mapper/crypty
    # Create LVM LVs
    lvs:
      # Create /dev/archvg/swaplv of size 8GB
      - name: swaplv
        vg: archvg
        size: 8G
      # Create /dev/archvg/rootlv of size archvg - size(swaplv)
      - name: rootlv
        vg: archvg

# Create root filesystem on /dev/archvg/rootlv
# with command:
# mkfs.btrfs -L /dev/archvg/rootlv
#
# And mount it to /mnt of live system with:
# mount -o compress:zstd:3 /dev/archvg/roolv
rootfs:
  device: /dev/archvg/rootlv # Use the LVM device created above
  fstype: btrfs
  fsopts: -L rootfs
  mntopts: "compress:zstd:3"

# Create extra filesystems
# This time, it's a boot partition:
# mkfs.vfat -F 32 -L BOOT /dev/vda1
#
# And mount it with:
# mount /dev/vda1 /boot
fs:
  - device: /dev/vda1
    fstype: vfat
    fsopts: -F 32 -L BOOT
    mnt: /boot
    mntopts:

# Create swap with:
# mkswap /dev/archvg/swaplv
#
# And mount it with:
# swapon /dev/archvg/swaplv
swap:
  - /dev/archvg/swaplv

pacstrap:
  - base
  - base-devel
  - git
  - helix

# Commands to run in chroot
chroot:
  - "bootctl --path=/boot install"
  - "curl https://example.com/arch/boot-entries > /boot/loader/entries/main.conf"
  - "curl https://example.com/arch/boot-entries > setup-boot.sh"
  - "chmod +x setup-boot.sh"
  - "./setup-boot.sh"

# Command to run on the live system
postinstall:
